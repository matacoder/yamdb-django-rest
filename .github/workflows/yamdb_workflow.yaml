name: DJANGO REST workflow

on: [ push ]

jobs:
#  tests:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.8
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install flake8 pytest
#          pip install -r requirements.txt
#
#      - name: Lint with flake8
#        run: flake8 .
#
#      - name: Test with pytest
#        run: pytest



#  build_and_push_to_docker_hub:
#    name: Push Docker image to Docker Hub
#    runs-on: ubuntu-latest
#    needs: tests
#    steps:
#      - name: Check out the repo
#        uses: actions/checkout@v2
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v1
#      - name: Login to Docker
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      - name: Push to Docker Hub
#        uses: docker/build-push-action@v2
#        with:
#          push: true
#          tags: ${{ secrets.DOCKER_USERNAME }}/yamdb:latest

  magic_deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install SSH key
        uses: kielabokkie/ssh-key-and-known-hosts-action@v1.1.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}
          ssh-host: ${{ secrets.IP_HOST }}

      - name: Add env var
        run: |
          sudo pip install docker-compose
          export DB_ENGINE=${{ secrets.DB_ENGINE }}
          export DB_NAME=${{ secrets.DB_NAME }}
          export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          export DB_HOST=${{ secrets.DB_HOST }}
          export DB_PORT=${{ secrets.DB_PORT }}
          export SECRET_KEY=${{ secrets.SECRET_KEY }}
          export DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }}
          export DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }}
          export DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }}

      - name: Docker compose up
        run: |
          docker context create remote --docker "host=ssh://${{ secrets.SSH_USER }}@${{ secrets.IP_HOST }}"
          docker context use remote
          docker kill $(docker ps -q)
          docker rm $(docker ps -a -q)
          docker-compose --context remote up -d --force-recreate

#  deploy:
#    runs-on: ubuntu-latest
#    needs: build_and_push_to_docker_hub
#    steps:
#      - name: executing remote ssh commands to deploy
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USER }}
#          key: ${{ secrets.SSH_KEY }}
#          script: |
#            sudo apt-get update
#            sudo apt-get install \
#                apt-transport-https \
#                ca-certificates \
#                curl \
#                gnupg-agent \
#                software-properties-common
#            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
#            sudo add-apt-repository \
#               "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
#               $(lsb_release -cs) \
#               stable"
#            sudo apt-get update
#            sudo apt-get install docker-ce docker-ce-cli containerd.io
#            sudo curl -L "https://github.com/docker/compose/releases/download/1.28.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#            sudo chmod +x /usr/local/bin/docker-compose
#            sudo pip3 install dump-env
#
#            export DB_ENGINE=${{ secrets.DB_ENGINE }}
#            export DB_NAME=${{ secrets.DB_NAME }}
#            export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
#            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
#            export DB_HOST=${{ secrets.DB_HOST }}
#            export DB_PORT=${{ secrets.DB_PORT }}
#            export SECRET_KEY=${{ secrets.SECRET_KEY }}
#            export DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }}
#            export DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }}
#            export DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }}
#
#            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/yamdb:latest
#            id=$(docker create ${{ secrets.DOCKER_USERNAME }}/yamdb:latest)
#            sudo docker cp $id:code/docker-compose.yaml docker-compose.yaml
#            sudo docker cp $id:code/Caddyfile Caddyfile
#            sudo docker rm -v $id
#
#            docker kill $(docker ps -q)
#            docker rm $(docker ps -a -q)
#            sudo docker-compose up -d --force-recreate

  send_message:
    runs-on: ubuntu-latest
    needs: magic_deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!